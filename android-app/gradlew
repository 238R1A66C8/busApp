#!/usr/bin/env sh#!/bin/sh



##

# Copyright 2015 the original author or authors.# Copyright © 2015-2021 the original authors.

##

# Licensed under the Apache License, Version 2.0 (the "License");# Licensed under the Apache License, Version 2.0 (the "License");

# you may not use this file except in compliance with the License.# you may not use this file except in compliance with the License.

# You may obtain a copy of the License at# You may obtain a copy of the License at

##

#      https://www.apache.org/licenses/LICENSE-2.0#      https://www.apache.org/licenses/LICENSE-2.0

##

# Unless required by applicable law or agreed to in writing, software# Unless required by applicable law or agreed to in writing, software

# distributed under the License is distributed on an "AS IS" BASIS,# distributed under the License is distributed on an "AS IS" BASIS,

# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License for the specific language governing permissions and# See the License for the specific language governing permissions and

# limitations under the License.# limitations under the License.

##



############################################################################################################################################################

###

##  Gradle start up script for UN*X#   Gradle start up script for POSIX generated by Gradle.

###

###############################################################################   Important for running:

#

# Attempt to set APP_HOME#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is

# Resolve links: $0 may be a link#       ncompatible, but you have some other compliant shell such as ksh or

PRG="$0"#       bash, then to run this script, type that shell name before the whole

# Need this for relative symlinks.#       command line, like:

while [ -h "$PRG" ] ; do#

    ls=`ls -ld "$PRG"`#           ksh Gradle

    link=`expr "$ls" : '.*-> \(.*\)$'`#

    if expr "$link" : '/.*' > /dev/null; then#       Busybox and similar reduced shells will NOT work, because this script

        PRG="$link"#       requires all of these POSIX shell features:

    else#         * functions;

        PRG=`dirname "$PRG"`"/$link"#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,

    fi#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;

done#         * compound commands having a testable exit status, especially «case»;

SAVED="`pwd`"#         * various built-in commands including «command», «set», and «ulimit».

cd "`dirname \"$PRG\"`/" >/dev/null#

APP_HOME="`pwd -P`"#   Important for patching:

cd "$SAVED" >/dev/null#

#   (2) This script targets any POSIX shell, so it avoids extensions provided

APP_NAME="Gradle"#       by Bash, Ksh, etc; in particular arrays are avoided.

APP_BASE_NAME=`basename "$0"`#

#       The "traditional" practice of packing multiple parameters into a

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.#       space-separated string is a well documented source of bugs and security

DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'#       problems, so this is (mostly) avoided, by progressively accumulating

#       options in "$@", and eventually passing that to Java.

# Use the maximum available, or set MAX_FD != -1 to use that value.#

MAX_FD="maximum"#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,

#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;

warn () {#       see the in-line comments for details.

    echo "$*"#

}#       There are tweaks for specific operating systems such as AIX, CygWin,

#       Darwin, MinGW, and NonStop.

die () {#

    echo#   (3) This script is generated from the Groovy template

    echo "$*"#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt

    echo#       within the Gradle project.

    exit 1#

}#       You can find Gradle at https://github.com/gradle/gradle/.

#

# OS specific support (must be 'true' or 'false').##############################################################################

cygwin=false

msys=false# Attempt to set APP_HOME

darwin=false

nonstop=false# Resolve links: $0 may be a link

case "`uname`" inapp_path=$0

  CYGWIN* )

    cygwin=true# Need this for daisy-chained symlinks.

    ;;while

  Darwin* )    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path

    darwin=true    [ -h "$app_path" ]

    ;;do

  MINGW* )    ls=$( ls -ld "$app_path" )

    msys=true    link=${ls#*' -> '}

    ;;    case $link in             #(

  NONSTOP* )      /*)   app_path=$link ;; #(

    nonstop=true      *)    app_path=$APP_HOME$link ;;

    ;;    esac

esacdone



CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jarAPP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit



# Determine the Java command to use to start the JVM.APP_NAME="Gradle"

if [ -n "$JAVA_HOME" ] ; thenAPP_BASE_NAME=${0##*/}

    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then

        # IBM's JDK on AIX uses strange locations for the executables# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.

        JAVACMD="$JAVA_HOME/jre/sh/java"DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

    else

        JAVACMD="$JAVA_HOME/bin/java"# Use the maximum available, or set MAX_FD != -1 to use that value.

    fiMAX_FD=maximum

    if [ ! -x "$JAVACMD" ] ; then

        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOMEwarn () {

    echo "$*"

Please set the JAVA_HOME variable in your environment to match the} >&2

location of your Java installation."

    fidie () {

else    echo

    JAVACMD="java"    echo "$*"

    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.    echo

    exit 1

Please set the JAVA_HOME variable in your environment to match the} >&2

location of your Java installation."

fi# OS specific support (must be 'true' or 'false').

cygwin=false

# Increase the maximum file descriptors if we can.msys=false

if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; thendarwin=false

    MAX_FD_LIMIT=`ulimit -H -n`nonstop=false

    if [ $? -eq 0 ] ; thencase "$( uname )" in                #(

        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then  CYGWIN* )         cygwin=true  ;; #(

            MAX_FD="$MAX_FD_LIMIT"  Darwin* )         darwin=true  ;; #(

        fi  MSYS* | MINGW* )  msys=true    ;; #(

        ulimit -n $MAX_FD  NONSTOP* )        nonstop=true ;;

        if [ $? -ne 0 ] ; thenesac

            warn "Could not set maximum file descriptor limit: $MAX_FD"

        fiCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

    else

        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"

    fi# Determine the Java command to use to start the JVM.

fiif [ -n "$JAVA_HOME" ] ; then

    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then

# For Darwin, add options to specify how the application appears in the dock        # IBM's JDK on AIX uses strange locations for the executables

if $darwin; then        JAVACMD=$JAVA_HOME/jre/sh/java

    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""    else

fi        JAVACMD=$JAVA_HOME/bin/java

    fi

# For Cygwin or MSYS, switch paths to Windows format before running java    if [ ! -x "$JAVACMD" ] ; then

if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

    APP_HOME=`cygpath --path --mixed "$APP_HOME"`

    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`Please set the JAVA_HOME variable in your environment to match the

    JAVACMD=`cygpath --unix "$JAVACMD"`location of your Java installation."

    fi

    # We build the pattern for arguments to be converted via cygpathelse

    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`    JAVACMD=java

    SEP=""    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

    for dir in $ROOTDIRSRAW ; do

        ROOTDIRS="$ROOTDIRS$SEP$dir"Please set the JAVA_HOME variable in your environment to match the

        SEP="|"location of your Java installation."

    donefi

    OURCYGPATTERN="(^($ROOTDIRS))"

    # Add a user-defined pattern to the cygpath arguments# Increase the maximum file descriptors if we can.

    if [ "$GRADLE_CYGPATTERN" != "" ] ; thenif ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then

        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"    case $MAX_FD in #(

    fi      max*)

    # Now convert the arguments - kludge to limit ourselves to /bin/sh        MAX_FD=$( ulimit -H -n ) ||

    i=0            warn "Could not query maximum file descriptor limit"

    for arg in "$@" ; do    esac

        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`    case $MAX_FD in  #(

        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option      '' | soft) :;; #(

      *)

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition        ulimit -n "$MAX_FD" ||

            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`            warn "Could not set maximum file descriptor limit to $MAX_FD"

        else    esac

            eval `echo args$i`="\"$arg\""fi

        fi

        i=`expr $i + 1`# Collect all arguments for the java command, stacking in reverse order:

    done#   * args from the command line

    case $i in#   * the main class name

        0) set -- ;;#   * -classpath

        1) set -- "$args0" ;;#   * -D...appname settings

        2) set -- "$args0" "$args1" ;;#   * --module-path (only if needed)

        3) set -- "$args0" "$args1" "$args2" ;;#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

        4) set -- "$args0" "$args1" "$args2" "$args3" ;;

        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;# For Cygwin or MSYS, switch paths to Windows format before running java

        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;if "$cygwin" || "$msys" ; then

        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )

        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;

    esac    JAVACMD=$( cygpath --unix "$JAVACMD" )

fi

    # Now convert the arguments - kludge to limit ourselves to /bin/sh

# Escape application args    for arg do

save () {        if

    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done            case $arg in                                #(

    echo " "              -*)   false ;;                            # don't mess with options #(

}              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath

APP_ARGS=`save "$@"`                    [ -e "$t" ] ;;                      #(

              *)    false ;;

# Collect all arguments for the java command, following the shell quoting and substitution rules            esac

eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"        then

            arg=$( cygpath --path --ignore --mixed "$arg" )

exec "$JAVACMD" "$@"        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi

# Collect all arguments for the java command;
#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
#     shell script including quotes and variable substitutions, so put them in
#     double quotes to make sure that they get re-expanded; and
#   * put everything else in single quotes, so that it's not re-expanded.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments).

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"